<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/posts/0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0/</url>
    <content><![CDATA[<h1 id="汇编常用知识"><a href="#汇编常用知识" class="headerlink" title="汇编常用知识"></a>汇编常用知识</h1><h2 id="常用中断类型码"><a href="#常用中断类型码" class="headerlink" title="常用中断类型码"></a>常用中断类型码</h2><h3 id="21H中断"><a href="#21H中断" class="headerlink" title="21H中断"></a>21H中断</h3><ul>
<li><p>4CH号功能：结束程序</p>
<p>MOV  AX, 4C00H</p>
</li>
<li><p>02H号功能：在屏幕上显示字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV  DL, &#x27;A&#x27;</span><br><span class="line">MOV  AH, 02H   </span><br></pre></td></tr></table></figure>
</li>
<li><p>01H号功能：由键盘输入一个字符</p>
</li>
<li><p>0A号功能：由键盘输入字符串</p>
<p>  调用之前先设置好缓冲区，第一个字节事先填入最多允许接受的字符个数（包括0DH），第二个字节留空，本功能自动回填实际输入的字符个数（不包括回车符），第三个字节起存放实际的字符串，用户按回车结束，从而最后一个字符是0DH，若用户输入字符超过设置，不予响应</p>
<ul>
<li><p>调用参数：DS:DX&#x3D;缓冲区首地址  DS:[DX]&#x3D;缓冲区最大容量</p>
</li>
<li><p>返回参数：DS:[DX+1]&#x3D;实际输入字符数  DS:DX+2&#x3D;字符串首地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LEA        SI</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="常用ASCII码"><a href="#常用ASCII码" class="headerlink" title="常用ASCII码"></a>常用ASCII码</h2><ul>
<li>回车  0DH</li>
<li>换行  0AH</li>
<li>终结符  ‘$’</li>
<li>‘A’ &#x3D; ‘9’ + 7</li>
</ul>
<h2 id="常用伪指令"><a href="#常用伪指令" class="headerlink" title="常用伪指令"></a>常用伪指令</h2><ul>
<li>ORG</li>
</ul>
<h2 id="做题时注意事项"><a href="#做题时注意事项" class="headerlink" title="做题时注意事项"></a>做题时注意事项</h2><ul>
<li>用到字符串操作指令时注意先设置DF</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>汇编与接口 Chapter2笔记</title>
    <url>/posts/cc929b90/</url>
    <content><![CDATA[<h2 id="2-1-8086CPU-的编程结构"><a href="#2-1-8086CPU-的编程结构" class="headerlink" title="2.1 8086CPU 的编程结构"></a>2.1 8086CPU 的编程结构</h2><ul>
<li><p>16 根地址线、20 根数据线、时钟频率 5MHz</p>
</li>
<li><p>8086 分为总线接口单元(BIU)和执行单元(EU)</p>
<p><img src="/images/8086_structure.png"></p>
<p>执行单元包括：</p>
<ul>
<li><p>通用寄存器</p>
<p>8 个 16 位寄存器</p>
<ul>
<li><p>4 个通用寄存器：AX、BX、CX、DX</p>
<p>可以拆分为 2 个单独的 8 位寄存器</p>
<ol>
<li><p>AX 累加器</p>
<p><strong>I&#x2F;O 指令必用</strong></p>
</li>
<li><p>BX 基址寄存器</p>
<p>存放基地址</p>
</li>
<li><p>CX 计数寄存器</p>
<p><strong>循环指令和串处理隐含的指定计数器</strong></p>
</li>
<li><p>DX 数据寄存器</p>
<p>可与 AX 拼接成 32 位，DX 中存放高 16 位</p>
<p><strong>I&#x2F;O 指令中存放外设端口号</strong></p>
</li>
</ol>
</li>
<li><p>4 个通用寄存器：SP、BP、SI、DI，更多被用于变址寻址：SI&#x2F;DI 与段寄存器 DS&#x2F;ES 联用实现数据的寻址；SP、BP 用于堆栈操作,与 SS 联用实现寻址</p>
<ol>
<li><p>SI 源变址寄存器</p>
<p><strong>间接寻址时用作地址寄存器和变址寄存器</strong></p>
<p><strong>串操作时用作源变址寄存器</strong></p>
</li>
<li><p>DI 目的变址寄存器</p>
<p><strong>间接寻址时用作地址寄存器和变址寄存器</strong></p>
<p><strong>串操作时用作目的变址寄存器</strong></p>
</li>
<li><p>SP 堆栈指针寄存器</p>
</li>
<li><p>BP 基址指针寄存器</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>标志寄存器 <strong><em>（记）</em></strong></p>
<p>16 位（9 位有效，7 位空闲）</p>
<p><em>CF、DF、IF、TF 可由指令设置，其余 5 个由 EU 设置</em></p>
<table>
<thead>
<tr>
<th>15</th>
<th>14</th>
<th>13</th>
<th>12</th>
<th>11</th>
<th>10</th>
<th>9</th>
<th>8</th>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th align="center">1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>OF</td>
<td>DF</td>
<td>IF</td>
<td>TF</td>
<td>SF</td>
<td>ZF</td>
<td></td>
<td>AF</td>
<td></td>
<td>PF</td>
<td align="center"></td>
<td>CF</td>
</tr>
</tbody></table>
<ol>
<li><p>状态位</p>
<p>(1) CF (Carry Flag)</p>
<p>进位标志，反应算术运算后最高位（字节操作 D<del>7</del>，字操作 D<del>15</del>）是否出现进位&#x2F;借位，有进位则为<strong>1</strong>。</p>
<p>主要用于加减法，移位和环移指令也会改变 CF</p>
<p>(2) PF (Parity Flag)</p>
<p>奇偶标志，<strong>1</strong>表示结果中有偶数个 1，<strong>0</strong>表示结果中有奇数个 1</p>
<p>(3) AF (Auxiliary Carry Flag)</p>
<p>辅助进位标志，<strong>1</strong>表示 D<del>3</del>向 D<del>4</del>进位&#x2F;借位，<strong>0</strong>表示没有</p>
<p>用于 BCD 码算术运算指令</p>
<p>(4) ZF (Zero Flag)</p>
<p>零标志，<strong>1</strong>标志运算结果<strong>为 0</strong></p>
<p>(5) SF (Sign Flag)</p>
<p>符号标志，与带符号运算的结果符号位（D<del>7</del>&#x2F;D<del>15</del>）一致，<strong>1</strong>表示结果为负数</p>
<p>(6) OF (Overflow Flag)</p>
<p>溢出标志，带符号数（补码）运算结果是否超过机器能表示的范围（-128<del>127 &#x2F; -32768</del>32767），<strong>1</strong>表示溢出</p>
</li>
<li><p>控制位</p>
<p>(1) DF (Direction Flag)</p>
<p>方向标志，字符串操作时用到，字节操作加减 1，字操作加减 2</p>
<p><strong>1</strong>表示递减，即<strong>高地址向低地址</strong></p>
<p><strong>0</strong>表示递增，即<strong>低地址向高地址</strong></p>
<p>(2) IF (Interrupt Enable Flag)</p>
<p>中断允许标志，<strong>1</strong>表示允许响应</p>
<p>IF 对不可屏蔽中断请求及内部中断无效</p>
<p>(3) TF (Trap Flag)</p>
<p>陷阱标志，为<strong>1</strong>时每执行完一条指令都自动产生一个内部中断，常用于调试</p>
</li>
</ol>
</li>
<li><p>算术逻辑单元（ALU)</p>
</li>
<li><p>EU 控制系统</p>
</li>
</ul>
<p>总线接口单元包括：</p>
<ul>
<li><p>段寄存器</p>
<ul>
<li><p>机器字长&#x3D;存储字长&#x3D;16 位</p>
</li>
<li><p><strong>小端存储</strong>，即高字节存放在高地址，低字节存放在低地址，以低字节的地址作为整个字（双字）的地址</p>
</li>
<li><p>8086 的分段管理：物理地址&#x3D;(段寄存器)*16+(地址寄存器)</p>
<p><em>段与段之间可以是连续的、断开的、部分重叠或全部重叠的</em></p>
<p>分段管理的意义：减少指令长度，缩短指令执行时间；便于程序浮动装配</p>
<p>​ 一些默认行为：</p>
<ol>
<li><p>取指令时：CS:IP</p>
</li>
<li><p>堆栈操作时：SS:SP</p>
</li>
<li><p>涉及存储器操作数时（除了以 BP 为地址寄存器外）：DS 作为默认段基址（可替换为 CS&#x2F;DS&#x2F;ES，添加段跨越前缀）</p>
<p>偏移地址为某 16 位偏移量（可以是指令中直接提供的 16 位地址、某个 16 位寄存器（BX&#x2F;DI&#x2F;SI）中的值、指令中的位移量加上某 16 位地址寄存器（BX&#x2F;BP&#x2F;DI&#x2F;SI）中的值）</p>
</li>
<li><p>ES 用于串操作指令中的数据块传送指令：</p>
<p>源地址：默认 DS 段基址（可替换为 CS&#x2F;DS&#x2F;ES，添加段跨越前缀），偏移地址 SI</p>
<p>目的地址：ES:DI</p>
</li>
<li><p>BP 作地址寄存器：</p>
<p>SS 默认段基址（可替换为 CS&#x2F;DS&#x2F;ES，添加段跨越前缀），SS:EA</p>
</li>
</ol>
</li>
<li><p>4 个段寄存器</p>
<ol>
<li>代码段寄存器 CS</li>
<li>数据段寄存器 DS</li>
<li>附加段寄存器 ES</li>
<li>堆栈段寄存器 SS（后进先出）</li>
</ol>
</li>
</ul>
</li>
<li><p>指令指针寄存器 IP（就是计组里说的 PC）</p>
<p>提供下一条指令的地址，具体来说是下一条指令的（代码）段内偏移地址，代码段的段地址由 CS 提供</p>
</li>
<li><p>地址形成逻辑（20 位地址加法器形成地址）</p>
</li>
<li><p>总线控制逻辑</p>
</li>
<li><p>指令队列（6 字节指令队列，先进先出，存放待执行指令，出去的进入 IP）</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-2-8086CPU-的工作模式与引脚功能"><a href="#2-2-8086CPU-的工作模式与引脚功能" class="headerlink" title="2.2 8086CPU 的工作模式与引脚功能"></a>2.2 8086CPU 的工作模式与引脚功能</h2><ul>
<li><p>工作模式（略）</p>
</li>
<li><p>引脚功能</p>
<img src="image/8086%E5%BC%95%E8%84%9A.png" style="zoom:67%;" />

<p>注： &#x2F;分时复用 (最大模式&#x2F;最小模式)</p>
<p>最小模式：</p>
<ul>
<li><p>$AD_0~AD_15$：地址&#x2F;数据分时复用（双向、三态）</p>
<p>T<del>1</del>时用作地址总线的低 16 位，其余时间用作数据总线进行数据传输</p>
</li>
<li><p>AD<del>16</del>&#x2F;S<del>3~~AD</del>19<del>&#x2F;S</del>6~：地址总线高 4 位&#x2F;状态总线（输出、三态）</p>
<p>T<del>1</del>时用作地址总线的高 4 位（I&#x2F;O 操作中置<strong>0</strong>），其余时间表示 CPU 的状态信息</p>
<p>S<del>6</del>恒为低电平，S<del>5</del>反映 IF 的值，S<del>4</del>和 S<del>3</del>表示正在使用的段寄存器</p>
</li>
<li><p>$\overline{BHE}$&#x2F;S<del>7</del>：高 8 位数据总线允许&#x2F;状态信号（输出）</p>
<p>T<del>1</del>时作为总线高半部分允许信号，低电平有效，其余时间输出状态信号 S<del>7</del>；DMA 方式下为高阻态</p>
<p><strong>与 A<del>0</del>结合决定高字节工作还是低字节工作</strong>（见奇地址存储与偶地址存储，估计大概率考）</p>
</li>
<li><p>CLK：系统时钟信号（输入）</p>
</li>
<li><p><span id="reset">RESET</span>：复位信号（输入）</p>
<p>至少维持 4 个时钟周期的高电平才有效，复位后各寄存器状态如下图所示：</p>
<img src="image/RESET%E5%90%8E%E5%AF%84%E5%AD%98%E5%99%A8%E7%8A%B6%E6%80%81.png" style="zoom:80%;" />

<p><strong>注意 CS 寄存器复位后的值是 0FFFFH</strong></p>
<p><strong>IF 也被清零辽，系统关中断</strong></p>
<p>当复位信号变为低电平时，CPU 从 FFFF0H 处开始执行程序，该处通常存放一条 JMP 指令，以转移到系统程序的实际开始处。复位时地址总线浮空，直到 cpu 脱离复位状态；其他控制信号先变高一段时间，然后浮空；ALE、HLDA 信号变为无效</p>
<p>复位信号 RESET 撤销后，经过 7 个时钟周期，CPU 才启动</p>
</li>
<li><p>NMI：<strong>不可屏蔽</strong>中断请求信号（输入）</p>
<p>上升沿触发，8086 完成当前指令后跳转到不可屏蔽中断服务程序</p>
</li>
<li><p>INTR：<strong>可屏蔽</strong>中断请求信号（输入）</p>
<p>电平触发，每条指令的最后一个时钟周期 CPU 采样该信号，若 INTR 为高电平且 IF&#x3D;1，则执行中断响应；若 IF&#x3D;0 则不响应，可见 INTR 可由软件复位 IF 加以屏蔽</p>
</li>
<li><p>READY：准备就绪信号（输入）</p>
<p>当被访问部件无法在规定时间完成数据传输，就向 CPU 发 READY 为低电平的信号，这样 CPU 就插入若干个等待周期 T<del>w</del>，完成传输后被访问部件再使 READY 信号为高电平</p>
</li>
<li><p>$\overline{RD}$：读控制信号（三态、输出）</p>
<p>低电平时 CPU 执行读操作；DMA 方式下为高阻态</p>
</li>
<li><p>$\overline{TEST}$：等待测试控制信号（输入）</p>
<p>WAIT 指令期间，每隔 5 个时钟周期 CPU 对该引脚采样，高电平继续等待，低电平继续执行后续指令</p>
</li>
<li><p>MN&#x2F;$\overline{MX}$：最小&#x2F;最大模式控制信号（输入）</p>
</li>
<li><p>M&#x2F;$\overline{IO}$：存储器&#x2F;IO 访问控制信号（输出）</p>
</li>
<li><p>ALE：地址锁存允许信号（输出）</p>
<p>高电平有效，总线周期的第一个时钟周期内发出正脉冲信号，其下降沿将 AD<del>0~~AD</del>15<del>以及 AD</del>16<del>&#x2F;S</del>3~~AD<del>19</del>&#x2F;S<del>6</del>上的地址信息锁存进地址锁存器</p>
</li>
<li><p>$\overline{DEN}$：数据允许信号（输出、三态）</p>
<p>用作总线收发器的允许控制信号，在 CPU 访存或 I&#x2F;O 的总线周期的后一段时间内有效</p>
</li>
<li><p>DT&#x2F;$\overline{R}$：数据发送&#x2F;接受信号（输出、三态）</p>
<p>CPU 写&#x2F;读</p>
</li>
<li><p>$\overline{WR}$：写控制信号（输出、三态）</p>
</li>
<li><p>$\overline{INTA}$：中断响应信号（输出、三态）</p>
<p>当 CPU 响应 INTR 的可屏蔽中断请求时，$\overline{INTA}$在中断响应周期内变为低电平</p>
</li>
<li><p>HOLD：保持请求信号（输入）</p>
<p>高电平时 CPU 完成当前总线周期后进入 HOLD 状态，让出总线控制权</p>
</li>
<li><p>HLDA：保持响应信号（输出）</p>
<p>CPU 对 HOLD 信号的响应信号，使三态信号线全部处于高阻态，外部逻辑控制总线</p>
</li>
</ul>
</li>
<li><p>存储器和 I&#x2F;O 端口的读写控制信号逻辑</p>
<img src="image/CPU%E5%92%8C%E5%A4%96%E8%AE%BE%E7%9A%84%E8%AF%BB%E5%86%99%E6%8E%A7%E5%88%B6%E4%BF%A1%E5%8F%B7.png" style="zoom:50%;" />

<table>
<thead>
<tr>
<th align="center">$\overline{RD}$</th>
<th align="center">$M&#x2F;\overline{IO}$</th>
<th align="center">$\overline{WR}$</th>
<th align="center">操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">读内存</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">读外设</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">写内存</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">写外设</td>
</tr>
</tbody></table>
<p><em>注意与后面的 8237A 比较，8237A 作为主片时是同时读内存写外设&#x2F;写内存读外设</em></p>
</li>
</ul>
<h2 id="2-3-8086-的操作和时序"><a href="#2-3-8086-的操作和时序" class="headerlink" title="2.3 8086 的操作和时序"></a>2.3 8086 的操作和时序</h2><ul>
<li><p>基本概念</p>
<p>机器周期：与主频相关，又叫时钟周期</p>
<p>指令周期：CPU 执行一条指令需要的时间，以机器周期为单位</p>
<p>总线周期：CPU 通过<strong>总线访问</strong>存储器或 I&#x2F;O 设备的时间周期，以机器周期为单位</p>
</li>
<li><p>8086 的总线周期</p>
<img src="image/%E5%9F%BA%E6%9C%AC%E6%80%BB%E7%BA%BF%E5%91%A8%E6%9C%9F.png" style="zoom:80%;" />

<p>缓冲：撤销地址信息，地址信息进地址锁存器</p>
<p>数据传输：允许插入若干个等待周期</p>
</li>
<li><p>8086 的操作类型</p>
<p>内部操作：ALU 操作、寄存器操作</p>
<p>外部操作：总线读&#x2F;写操作、中断响应操作、中线保持&#x2F;响应操作、系统复位&#x2F;启动操作、暂停操作</p>
</li>
<li><p>8086 的操作时序（最小模式）</p>
<ul>
<li><p>总线操作</p>
<ol>
<li><p>总线读操作</p>
<img src="image/%E6%80%BB%E7%BA%BF%E8%AF%BB.png" style="zoom:80%;" />
</li>
<li><p>总线写操作</p>
<img src="image/%E6%80%BB%E7%BA%BF%E5%86%99.png" style="zoom:80%;" /></li>
</ol>
</li>
<li><p>中断响应操作</p>
<img src="image/%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94.png" style="zoom:80%;" />

<p>响应中断时 CPU 执行两个中断周期，第一个周期的 T<del>2~~T</del>4<del>时$\overline{INTA}$为低电平，这里作为对中断请求设备的响应；第二个周期的 T</del>2<del>T<del>4</del>时$\overline{INTA}$为低电平，这里用于通知中断请求设备（通过中断控制器）把中断类型号（决定了中断服务程序入口地址）送到数据线低八位（AD~7</del>AD<del>0</del>）。在 8086 中，2 个周期之间有 3 个空闲周期 T<del>i</del></p>
</li>
<li><p>总线保持与响应操作</p>
<img src="image/%E6%80%BB%E7%BA%BF%E4%BF%9D%E6%8C%81%E4%B8%8E%E5%93%8D%E5%BA%94.png" style="zoom:80%;" />

<p>其他系统总线主设备向 8086 请求总线，发送 HOLD 请求信号，CPU 接收到 HOLD 信号后，在<strong>当前总线周期 T<del>4</del>或空闲周期 T<del>i</del>的后沿</strong>输出保持响应信号 HLDA，然后从下一个时钟开始让出总线控制权。外设的 DMA 传输结束后，使 HOLD 信号变为低电平，则<strong>下一个时钟的下降沿</strong>HLDA 信号变为低电平（无效） [<em>HOLD 信号由外设驱动</em>]</p>
</li>
<li><p>复位和启动操作</p>
<img src="image/%E5%A4%8D%E4%BD%8D%E4%B8%8E%E5%90%AF%E5%8A%A8.png" style="zoom:80%;" />

<p>复位后的系统状态见<a href="#reset">RESET 信号</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="2-4-8086-系统的存储器组织"><a href="#2-4-8086-系统的存储器组织" class="headerlink" title="2.4 8086 系统的存储器组织"></a>2.4 8086 系统的存储器组织</h2><ul>
<li><p>小端存储，低字节在低地址单元，高字节在高地址单元</p>
</li>
<li><p>存储单元按字节组织，地址范围 00000H~FFFFFH</p>
</li>
<li><p>存储字（两个字节）采取<strong>边界对准（低字节存放在偶地址单元，高字节存放在奇地址单元）</strong>的规则存放</p>
</li>
<li><p>8086 通过低八位数据总线访问偶地址存储单元&#x2F;IO 端口，通过高八位数据总线访问奇地址存储单元&#x2F;IO 端口</p>
<img src="image/%E5%A5%87%E5%9C%B0%E5%9D%80%E5%81%B6%E5%9C%B0%E5%9D%80.png" style="zoom:60%;" />

<p>从偶地址单元开始读&#x2F;写一个字，需要<strong>一个</strong>总线周期</p>
<table>
<thead>
<tr>
<th align="center">$\overline{BHE}$</th>
<th align="center">A<del>0</del></th>
<th align="center">操作</th>
<th align="center">所用数据线</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">从偶地址单元读&#x2F;写两个字节</td>
<td align="center">D<del>0~~D</del>15~</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">从偶地址单元读&#x2F;写一个字节</td>
<td align="center">D<del>0~~D</del>7~</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">从奇地址单元读&#x2F;写一个字节</td>
<td align="center">D<del>8~~D</del>15~</td>
</tr>
</tbody></table>
<p>从奇地址单元开始读&#x2F;写一个字，需要<strong>两个</strong>总线周期</p>
<table>
<thead>
<tr>
<th align="center">$\overline{BHE}$</th>
<th align="center">A0</th>
<th align="center">操作</th>
<th align="center">所用数据线</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">第一步：从奇地址单元读&#x2F;写一个字节</td>
<td align="center">D<del>8~~D</del>15~</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">第二步：从偶地址单元读&#x2F;写一个字节</td>
<td align="center">D<del>0~~D</del>7~</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h2 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h2><ol>
<li><p>8086 有哪几个通用寄存器？哪些提供了字节访问？</p>
<p>AX，累加器</p>
<p>BX，基址寄存器</p>
<p>CX，计数寄存器</p>
<p>DX，数据寄存器</p>
<p>SI，源变址寄存器</p>
<p>DI，目的变址寄存器</p>
<p>SP，堆栈指针寄存器</p>
<p>BP，基址指针寄存器</p>
<p>AX&#x2F;BX&#x2F;CX&#x2F;DX 提供字节访问</p>
</li>
<li><p>标志寄存器各标志位的含义？IP 和 SP 的含义？</p>
</li>
<li><p>8086 有哪几个段寄存器？</p>
</li>
<li><p>寄存器和存储器的区别？</p>
</li>
<li><p>8086 的一个字（16 位）是如何存入存储器的？</p>
</li>
<li><p>8086 分为哪两个部分？它们如何协调工作？</p>
<p>8086 分为总线接口单元和执行单元，BIU 和 EU 是并行工作的，又是相互配合的，体现在：</p>
<ul>
<li><p>当指令队列中有 2 个空字节时，BIU 就启动，将新指令送入队列</p>
</li>
<li><p>EU 在指令执行过程中，需要访问存储器或 I&#x2F;O 时，向 BIU 发出请求</p>
</li>
<li><p>执行转移指令、调用指令以及返回指令时，指令队列自动清空</p>
</li>
</ul>
</li>
<li><p>8086 复位后各寄存器的状态？</p>
</li>
<li><p>8086 使用存储器地址访问数据时，能根据地址确定数据的大小吗？</p>
</li>
<li><p>8086 的地址空间是多大？</p>
</li>
<li><p>1 个段的首地址的特点？</p>
</li>
<li><p>一个物理地址由段地址和偏移地址组成，这种表示是唯一的吗？</p>
</li>
<li><p>如何将段地址和偏移地址合成成物理地址？</p>
</li>
</ol>
]]></content>
  </entry>
</search>
